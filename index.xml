<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hejin's Blog</title><link>https://blog.remind.me/</link><description>Recent content on Hejin's Blog</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Sun, 13 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.remind.me/index.xml" rel="self" type="application/rss+xml"/><item><title>【深度】详解银企直连</title><link>https://blog.remind.me/posts/%E6%B7%B1%E5%BA%A6%E8%AF%A6%E8%A7%A3%E9%93%B6%E4%BC%81%E7%9B%B4%E8%BF%9E/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.remind.me/posts/%E6%B7%B1%E5%BA%A6%E8%AF%A6%E8%A7%A3%E9%93%B6%E4%BC%81%E7%9B%B4%E8%BF%9E/</guid><description>&lt;blockquote>
&lt;p>📌 本文为转载文章。🔗 原文链接：&lt;a href="https://zhuanlan.zhihu.com/p/773592381">【深度】详解银企直连&lt;/a>&lt;/p>
&lt;p>本博客仅作学习与分享之用，版权归原作者所有。如有侵权请联系删除。&lt;/p>&lt;/blockquote>
&lt;h2 id="一名词解释">一、名词解释&lt;/h2>
&lt;p>银企直连是指企业内部ERP系统或者是专业财资管理系统，通过银行开放的数据接口与商业银行业务系统、电子银行系统或者现金管理平台等实现无缝连接，&lt;strong>通过银企直联对接，企业可实现账户余额、明细实时查询、实时转账、资金归集/下拨、工资代发以及电子回单获取、投资理财等功能&lt;/strong>，并可根据需要自行在其财务系统中定制更多个性化功能网上银行业务，是银行提供给高端客户的电子银行产品。&lt;/p>
&lt;h2 id="二发展历程">二、发展历程&lt;/h2>
&lt;p>早期，企业网银的出现在一定程度上缓解了企业资金流动不透明、时效性低、到账慢、人力成本高等问题。随着经营理念的转变和管理水平的提高，大量企业客户提出资金集中管理、提高资金使用效率、降低经营成本的财务管理需求。银行为满足企业发展的要求，也不断在“开放银行”理念的驱动下进行尝试和探索。&lt;/p>
&lt;p>&lt;strong>传统银企直连模式。传统银企直联以非标准定制API模式，通过前置机+专线直连的方式，将大型集团客户的 EPR系统和银行综合业务系统连接，对接耗时长，成本高&lt;/strong>。该模式的主要价值是实现大型集团业务流、财务流、资金流三流合一，简化大型集团财务处理和审批流程。就银行方而言，银企直联是延展性相对有限的业务，以巩固客户合作关系为主要目的，为企业集团客户提供更便捷的资金管理服务，但银企直连为银行创造的直接收益相对有限，更多的是其他衍生金融服务中获得收益。&lt;/p>
&lt;p>&lt;strong>OpenAPI模式&lt;/strong>。OpenAPI也被称作开放平台，其&lt;strong>主要特点表现为接口服务的标准化&lt;/strong>。&lt;strong>该模式强调通过低成本、轻量级、快速对接、敏捷构建的技术能力，实现银行金融服务的对外开放&lt;/strong>。开放银行的重点在于“开放”，与传统银行相比，不变的是银行的服务，改变的是金融服务交付的方式，即银行运营模式的改变，银行将演变成为按需分配的金融服务基础平台。“银行不再是一个金融服务场所，而是一种行为”，银行虽然没有触达客户的界面，但通过将其服务嵌入融合到客户的应用场景，实现更深度更广的金融服务连接。其服务对象从大型集团客户拓展至 B2B 模式下的产业互联网平台与 B2C 模式下的消费互联网平台，有效拓展了服务客户范围。“OpenAPI”模式在输出标准金融产品与服务的同时，结合场景方特点，探索输出行业或场景解决方案。得益于接口标准化，“OpenAPI”模式的成本显著低于银企直联。&lt;/p>
&lt;p>&lt;strong>云服务模式&lt;/strong>。传统软件厂商作为企业财务服务的重要参与者也在积极拓展其服务范围，致力于打通其自有财务管理系统和银行核心系统，实现真正的“业务融合”目标。用友、金蝶作为企业财务管理软件的头部企业，都在积极探索银企直连与云服务结合的新模式。与银行的现金管理系统不同，软件厂商通过将银企直联本地部署升级到云模式来达到服务企业的目的。&lt;/p>
&lt;p>&lt;img src="assets/82bda683f6b11ed136b5383658ecbc8f.jpg" 
 alt="img" 
 class="rounded-shadow-image"
 loading="lazy"> &lt;/p>
&lt;p>&lt;strong>云模式的银企直联解决了企业在使用银企直连系统时需要投入大量的资金购买前置机，铺设专线，并且需要众多技术人员进行系统的维护和管理的问题&lt;/strong>，还有效避免了银行的接口变更后，企业内部系统或前置机软件需要频繁进行变更和升级等问题，降低了银企直连接入的门槛，适合对银企直连有业务诉求，适合对价格较为敏感的企业客户。&lt;/p>
&lt;p>&lt;strong>司库直连模式&lt;/strong>。在政策及市场的推动下，银行也在积极思变，从传统的银企直连模式向司库直连模式过渡，不再单纯的提供账户管理服务，而是为了满足集团企业资金部门、结算中心、财务共享中心、财务公司等全面资金管理的需要，为企业提供全银行账户统一可视和集中管理、资金操作和资金流向的全面监控，促进内部企业间的资金融通，以及有效防控资金风险、降低资金成本，提高资金使用效率。&lt;/p>
&lt;h2 id="三银企直连技术解析">三、银企直连技术解析&lt;/h2>
&lt;h3 id="一网络接入方式">（一）网络接入方式&lt;/h3>
&lt;p>目前，各银行银企直连主流的接入方式主要包括：&lt;strong>公网接入和专线接入&lt;/strong>两种。&lt;/p>
&lt;p>&lt;strong>公网接入&lt;/strong>是指银企直联系统通过互联网的方式来连接银行端系统和企业端系统，这种接入方式成本较低，但网速容易受外部网络环境影响。&lt;/p>
&lt;p>&lt;strong>专线接入&lt;/strong>是指银企直联系统采用专门的线路来连接银行端系统和企业端系统，这种接入方式需要企业按需求（月、年等）租用线路，成本比较高，但网速稳定，不易受外部网络环境影响。目前，银企直联系统以专线模式连接较多。&lt;/p>
&lt;h3 id="二前置程序部署">（二）前置程序部署&lt;/h3>
&lt;p>现有的银企直连解决方案包含需前置程序和无需前置程序两种模式。&lt;/p>
&lt;p>（1）需要前置程序&lt;/p>
&lt;p>目前，大部分银行都提供前置程序，企业对接该前置程序启动的服务，前置程序再与银行服务通讯，一般前置程序会负责签名验签以及与银行服务建立安全通讯通道，企业端通过银行提供的jar包或dll（嵌入式）进行调用。&lt;/p>
&lt;p>&lt;img src="assets/67ea6a212df1cad024aa0224550d6fde.jpg" 
 alt="img" 
 class="rounded-shadow-image"
 loading="lazy"> &lt;/p>
&lt;p>（2）不需要前置程序（免前置机）&lt;/p>
&lt;p>还有部分银行提供无前置方式，企业端直接与银行服务进行通讯，无前置方式根据银行是否公开通讯安全算法分为两类：&lt;/p>
&lt;p>一类是银行不公开安全算法，银行提供给企业jar包或dll，由企业的系统引入，企业只能通过银行提供的jar包或dll来调用银行的银企直联服务；&lt;/p>
&lt;p>另一类是银行公开安全算法，一般也会提供调用的demo，demo中会有可直接引用的jar包或者dll，企业端的系统可按照银行提供的说明自行实现或者参考demo实现调用银行的直联服务。&lt;/p>
&lt;h3 id="三安全证书形式">（三）安全证书形式&lt;/h3>
&lt;p>硬证书：即采用U盾形式，包括普通U盾和高速U盾。&lt;/p>
&lt;p>软证书：即以文件形式。&lt;/p>
&lt;p>加密机：也就是证书存储在加密机中，前置程序也安装在加密机中。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>U盾（硬证书）&lt;/th>
 &lt;th>软证书&lt;/th>
 &lt;th>加密机&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>证书介质安全性&lt;/td>
 &lt;td>高私钥不出key，外部程序无法获取私钥&lt;/td>
 &lt;td>低&lt;/td>
 &lt;td>高私钥不出加密机，外部程序无法获取&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>加解密/签名验签速度&lt;/td>
 &lt;td>低加解密/签名验签由U盾完成&lt;/td>
 &lt;td>高加解密/签名验签由服务器完成&lt;/td>
 &lt;td>较高由加密机中的芯片完成&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>费用&lt;/td>
 &lt;td>中需前置机&lt;/td>
 &lt;td>低&lt;/td>
 &lt;td>高需加密机&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>可维护性&lt;/td>
 &lt;td>中&lt;/td>
 &lt;td>简单&lt;/td>
 &lt;td>复杂&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="四安全保障措施">（四）安全保障措施&lt;/h3>
&lt;p>在银企直连业务中主要通过以下方式组合保障通信的安全性，&lt;strong>一是&lt;/strong>企业与银行的信息交互时，采用https或者ssl的通讯协议保证数据通信安全。&lt;strong>二是&lt;/strong>给接入企业办法数字证书，通过数字证书进行通讯内容的签名验签。&lt;strong>三是&lt;/strong>设置企业访问IP白名单，对于非白名单IP发起的访问请求语义拒绝处理。&lt;strong>四是&lt;/strong>如企业采用前置程序模式接入，前置程序会进行消息会话管理，会话登录一般由前置程序完成。&lt;/p>
&lt;h3 id="五行业最佳实践">（五）行业最佳实践&lt;/h3>
&lt;p>根据企业接入直联是否需要前置机、使用何种证书形式等方面来区分，目前国内银企直联的接入方式可以分为以下三种：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>前置程序+硬件证书&lt;/th>
 &lt;th>加密机&lt;/th>
 &lt;th>无前置程序+软证书（云模式）&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>适用企业&lt;/td>
 &lt;td>预算较多，安全性要求高的&lt;/td>
 &lt;td>预算较多，高频支付结算或查询需要的&lt;/td>
 &lt;td>预算较少，安全性要求相对较低的&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>性能&lt;/td>
 &lt;td>低&lt;/td>
 &lt;td>较高&lt;/td>
 &lt;td>高&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>安全性&lt;/td>
 &lt;td>高&lt;/td>
 &lt;td>高&lt;/td>
 &lt;td>低&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="四银企对接模式分析">四、银企对接模式分析&lt;/h2>
&lt;h3 id="一关于企业网银的问题分析">（一）关于企业网银的问题分析&lt;/h3>
&lt;p>不可否认，企业网银的出现极大的缓解了企业财务人员的资金管理压力，财务人员无需临柜即可远程办理账户管理及资金收付业务，提高了资金管理效率。在银企直连出现前，企业网银成为了企业账户和资金的管理的主要渠道，但基于企业网银的传统的审批、收付款、对账流程中常常会遇到以下问题：&lt;strong>一是凭证信息重复填写&lt;/strong>。在传统的财务资金支付结算工作模式下，针对一笔业务报销单的支付需要财务人员完成会计凭证的制单、复核和打印凭证后，将纸质凭证交给出纳人员。出纳根据凭证上的付款信息，登陆企业网银，登记会计凭证上的转账信息，确认无误后提交转账复核，而后另一名出纳登陆企业网银，根据会计凭证再次确认登记信息无误后发起转账申请。为保证出纳人员录入信息准确无误，大型企业往往需要配置两名出纳相互复核转账信息准确无误后，才发起付款，导致转账凭证制单审核流程脱节，付款耗时长。&lt;strong>二是业务财务信息断层&lt;/strong>。收付款流程分别在企业ERP系统及企业网银系统处理，存在业务信息链断层，特别是多行开户的企业，财务人员需要在多个系统间来回切换，工作量大，效率低，且容易产生业务差错，导致汇款失败、汇款延迟等问题出现。&lt;strong>三是跨银行多账户管理困难&lt;/strong>。企业集团因跨地区经营需要、资金分类管理、贷款资金发放、维护银企合作关系等原因，往往需要与多家银行建立业务往来，并开立不同银行的多个账户，通过企业网银管理账户时，需登录不同银行的网银系统管理企业资金，操作极为繁琐，无法实时查询各账户余额变动情况，给财务管理带来不便。&lt;/p></description></item><item><title>关于我</title><link>https://blog.remind.me/about/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.remind.me/about/</guid><description>&lt;p>👋 你好，我是一个后端开发者，现居杭州。&lt;br>
日常在 Java、Go 之间游走，喜欢写出优雅的接口和稳定的系统。&lt;/p>
&lt;p>业余时间我会：&lt;/p>
&lt;ul>
&lt;li>📚 看书（玄幻小说、文学作品、还有技术书）&lt;/li>
&lt;li>🚴 骑车（通勤也骑，周末也骑）&lt;/li>
&lt;li>🏋️ 健身（练得不狠，但一直在练）&lt;/li>
&lt;/ul>
&lt;p>虽然是个 &lt;strong>摇滚乐爱好者&lt;/strong>，但我不爱参加音乐节 —— 现场常常拉胯，宁愿戴上耳机享受录音棚里的高质量演奏。&lt;/p>
&lt;p>📱 微信联系我（扫码备注来意，非诚勿扰）&lt;/p>
&lt;img src="https://blog.remind.me/images/wechat_qrcode.jpg" alt="微信二维码" style="width:200px; border-radius: 8px; box-shadow: 0 0 8px rgba(0,0,0,0.1);" /></description></item><item><title>博客 Theme 来源</title><link>https://blog.remind.me/posts/%E5%8D%9A%E5%AE%A2-theme-%E6%9D%A5%E6%BA%90/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.remind.me/posts/%E5%8D%9A%E5%AE%A2-theme-%E6%9D%A5%E6%BA%90/</guid><description>&lt;h2 id="-我的博客主题来源">✨ 我的博客主题来源&lt;/h2>
&lt;p>在搭建博客的过程中，我花了不少时间寻找一个简洁的博客框架或者博客主题。最终，我选择 Hugo 的 YinYang 主题 —— 一个设计美观、体验极佳的主题，它完全符合我对写作环境的期待。🖋️&lt;/p>
&lt;p>我第一次遇见这个主题是在 &lt;a href="https://blog.joway.io/">Joway 的博客 🌐&lt;/a>。这个博客整体风格简约、排版舒服，尤其是首页那种「静而不冷，简而不空」的感觉，给我留下了很深的印象。当我发现他是开源的，并且提供了 Hugo 版本的主题时，几乎是毫不犹豫地就决定采用它。&lt;/p>
&lt;ul>
&lt;li>📦 主题源码地址：&lt;/li>
&lt;li>🔗 GitHub - &lt;a href="https://github.com/joway/hugo-theme-yinyang">joway/hugo-theme-yinyang&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>整个主题最让我满意的是简约的设计风格和让人看着很舒服的字体。如果你也正在寻找一个适合写作和分享的 Hugo 主题，我非常推荐试试看。👍&lt;/p>
&lt;p>在这个基础上，我根据自己的需求做了一些小的调整，比如代码块的样式配置 ✍️、添加了回到顶部的向上箭头 ⬆ 等。但无论如何，这个主题的原始设计已经非常出色，感谢作者的开源贡献！🙌&lt;/p></description></item><item><title>浅谈 J.U.C 线程池核心源码</title><link>https://blog.remind.me/posts/%E6%B5%85%E8%B0%88-j.u.c-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.remind.me/posts/%E6%B5%85%E8%B0%88-j.u.c-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/</guid><description>&lt;p>简单分析一下线程池的运行机制、Worker、线程池中的锁、异常处理等源码。&lt;/p>
&lt;h2 id="线程池运行机制">线程池运行机制&lt;/h2>
&lt;p>这里简单提一下线程池的运行机制，相信大家对这个并不陌生。&lt;/p>
&lt;p>&lt;img src="assets/b437fcb41ec5f855446edb960a91045d.png" 
 alt="" 
 class="rounded-shadow-image"
 loading="lazy"> &lt;/p>
&lt;p>当一个 Task 被提交，首先检查当前线程池中的工作线程数量，如果尚未超过 corePoolSize，那么可以创建一个新的 Worker，将这个 Task 作为它的 firstTask 执行。&lt;/p>
&lt;p>如果此时工作线程的数量来到了 corePoolSize，那么线程池尝试将这个 Task 加入到队列中，后续由线程池中的某个线程从队列中拿到这个 Task 执行。&lt;/p>
&lt;p>如果创建线程池时设置的队列是一个有界队列，那么当任务数量超出队列容量时，再次尝试创建一个新的 Worker。&lt;/p>
&lt;p>如果当前线程池中的工作线程数量来到了 maximumPoolSize，显然创建新 Worker 失败，线程池执行预设的拒绝策略，否则该 Task 作为新 Worker 的 firstTask 执行。&lt;/p>
&lt;p>与这个机制相关的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">execute&lt;/span>(Runnable command) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (command &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NullPointerException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> ctl.&lt;span style="color:#a6e22e">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Worker 数量 &amp;lt; corePoolSize，增加 Worker 来执行 command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (workerCountOf(c) &lt;span style="color:#f92672">&amp;lt;&lt;/span> corePoolSize) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (addWorker(command, &lt;span style="color:#66d9ef">true&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> ctl.&lt;span style="color:#a6e22e">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Worker 数量超过 corePoolSize，那么就先入队&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (isRunning(c) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> workQueue.&lt;span style="color:#a6e22e">offer&lt;/span>(command)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> recheck &lt;span style="color:#f92672">=&lt;/span> ctl.&lt;span style="color:#a6e22e">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>isRunning(recheck) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> remove(command))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reject(command);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (workerCountOf(recheck) &lt;span style="color:#f92672">==&lt;/span> 0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addWorker(&lt;span style="color:#66d9ef">null&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 队列满，就增加 Worker 来执行 command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>addWorker(command, &lt;span style="color:#66d9ef">false&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 增加 Worker 失败，就要调用拒绝策略了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reject(command);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，这只是一个粗略的线程池运行机制，更多细节的内容，接着往下看。&lt;/p></description></item></channel></rss>